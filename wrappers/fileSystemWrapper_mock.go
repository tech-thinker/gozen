// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package wrappers

import (
	mock "github.com/stretchr/testify/mock"
)

// NewMockFileSystemWrapper creates a new instance of MockFileSystemWrapper. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockFileSystemWrapper(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockFileSystemWrapper {
	mock := &MockFileSystemWrapper{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockFileSystemWrapper is an autogenerated mock type for the FileSystemWrapper type
type MockFileSystemWrapper struct {
	mock.Mock
}

type MockFileSystemWrapper_Expecter struct {
	mock *mock.Mock
}

func (_m *MockFileSystemWrapper) EXPECT() *MockFileSystemWrapper_Expecter {
	return &MockFileSystemWrapper_Expecter{mock: &_m.Mock}
}

// CreateDirectory provides a mock function for the type MockFileSystemWrapper
func (_mock *MockFileSystemWrapper) CreateDirectory(path string) error {
	ret := _mock.Called(path)

	if len(ret) == 0 {
		panic("no return value specified for CreateDirectory")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string) error); ok {
		r0 = returnFunc(path)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockFileSystemWrapper_CreateDirectory_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateDirectory'
type MockFileSystemWrapper_CreateDirectory_Call struct {
	*mock.Call
}

// CreateDirectory is a helper method to define mock.On call
//   - path string
func (_e *MockFileSystemWrapper_Expecter) CreateDirectory(path interface{}) *MockFileSystemWrapper_CreateDirectory_Call {
	return &MockFileSystemWrapper_CreateDirectory_Call{Call: _e.mock.On("CreateDirectory", path)}
}

func (_c *MockFileSystemWrapper_CreateDirectory_Call) Run(run func(path string)) *MockFileSystemWrapper_CreateDirectory_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockFileSystemWrapper_CreateDirectory_Call) Return(err error) *MockFileSystemWrapper_CreateDirectory_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockFileSystemWrapper_CreateDirectory_Call) RunAndReturn(run func(path string) error) *MockFileSystemWrapper_CreateDirectory_Call {
	_c.Call.Return(run)
	return _c
}

// Destroy provides a mock function for the type MockFileSystemWrapper
func (_mock *MockFileSystemWrapper) Destroy(path string) error {
	ret := _mock.Called(path)

	if len(ret) == 0 {
		panic("no return value specified for Destroy")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string) error); ok {
		r0 = returnFunc(path)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockFileSystemWrapper_Destroy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Destroy'
type MockFileSystemWrapper_Destroy_Call struct {
	*mock.Call
}

// Destroy is a helper method to define mock.On call
//   - path string
func (_e *MockFileSystemWrapper_Expecter) Destroy(path interface{}) *MockFileSystemWrapper_Destroy_Call {
	return &MockFileSystemWrapper_Destroy_Call{Call: _e.mock.On("Destroy", path)}
}

func (_c *MockFileSystemWrapper_Destroy_Call) Run(run func(path string)) *MockFileSystemWrapper_Destroy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockFileSystemWrapper_Destroy_Call) Return(err error) *MockFileSystemWrapper_Destroy_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockFileSystemWrapper_Destroy_Call) RunAndReturn(run func(path string) error) *MockFileSystemWrapper_Destroy_Call {
	_c.Call.Return(run)
	return _c
}

// WriteFile provides a mock function for the type MockFileSystemWrapper
func (_mock *MockFileSystemWrapper) WriteFile(path string, data string) error {
	ret := _mock.Called(path, data)

	if len(ret) == 0 {
		panic("no return value specified for WriteFile")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = returnFunc(path, data)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockFileSystemWrapper_WriteFile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WriteFile'
type MockFileSystemWrapper_WriteFile_Call struct {
	*mock.Call
}

// WriteFile is a helper method to define mock.On call
//   - path string
//   - data string
func (_e *MockFileSystemWrapper_Expecter) WriteFile(path interface{}, data interface{}) *MockFileSystemWrapper_WriteFile_Call {
	return &MockFileSystemWrapper_WriteFile_Call{Call: _e.mock.On("WriteFile", path, data)}
}

func (_c *MockFileSystemWrapper_WriteFile_Call) Run(run func(path string, data string)) *MockFileSystemWrapper_WriteFile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		run(
			arg0,
			arg1,
		)
	})
	return _c
}

func (_c *MockFileSystemWrapper_WriteFile_Call) Return(err error) *MockFileSystemWrapper_WriteFile_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockFileSystemWrapper_WriteFile_Call) RunAndReturn(run func(path string, data string) error) *MockFileSystemWrapper_WriteFile_Call {
	_c.Call.Return(run)
	return _c
}
