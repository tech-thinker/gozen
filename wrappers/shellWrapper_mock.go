// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package wrappers

import (
	mock "github.com/stretchr/testify/mock"
)

// NewMockShellWrapper creates a new instance of MockShellWrapper. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockShellWrapper(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockShellWrapper {
	mock := &MockShellWrapper{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockShellWrapper is an autogenerated mock type for the ShellWrapper type
type MockShellWrapper struct {
	mock.Mock
}

type MockShellWrapper_Expecter struct {
	mock *mock.Mock
}

func (_m *MockShellWrapper) EXPECT() *MockShellWrapper_Expecter {
	return &MockShellWrapper_Expecter{mock: &_m.Mock}
}

// Exec provides a mock function for the type MockShellWrapper
func (_mock *MockShellWrapper) Exec(name string, args ...string) ([]byte, error) {
	var tmpRet mock.Arguments
	if len(args) > 0 {
		tmpRet = _mock.Called(name, args)
	} else {
		tmpRet = _mock.Called(name)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for Exec")
	}

	var r0 []byte
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, ...string) ([]byte, error)); ok {
		return returnFunc(name, args...)
	}
	if returnFunc, ok := ret.Get(0).(func(string, ...string) []byte); ok {
		r0 = returnFunc(name, args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string, ...string) error); ok {
		r1 = returnFunc(name, args...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockShellWrapper_Exec_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Exec'
type MockShellWrapper_Exec_Call struct {
	*mock.Call
}

// Exec is a helper method to define mock.On call
//   - name string
//   - args ...string
func (_e *MockShellWrapper_Expecter) Exec(name interface{}, args ...interface{}) *MockShellWrapper_Exec_Call {
	return &MockShellWrapper_Exec_Call{Call: _e.mock.On("Exec",
		append([]interface{}{name}, args...)...)}
}

func (_c *MockShellWrapper_Exec_Call) Run(run func(name string, args ...string)) *MockShellWrapper_Exec_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 []string
		var variadicArgs []string
		if len(args) > 1 {
			variadicArgs = args[1].([]string)
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *MockShellWrapper_Exec_Call) Return(bytes []byte, err error) *MockShellWrapper_Exec_Call {
	_c.Call.Return(bytes, err)
	return _c
}

func (_c *MockShellWrapper_Exec_Call) RunAndReturn(run func(name string, args ...string) ([]byte, error)) *MockShellWrapper_Exec_Call {
	_c.Call.Return(run)
	return _c
}
