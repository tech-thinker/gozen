// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package helpers

import (
	mock "github.com/stretchr/testify/mock"
	"github.com/tech-thinker/gozen/models"
)

// NewMockCodeHelper creates a new instance of MockCodeHelper. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCodeHelper(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCodeHelper {
	mock := &MockCodeHelper{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockCodeHelper is an autogenerated mock type for the CodeHelper type
type MockCodeHelper struct {
	mock.Mock
}

type MockCodeHelper_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCodeHelper) EXPECT() *MockCodeHelper_Expecter {
	return &MockCodeHelper_Expecter{mock: &_m.Mock}
}

// GenerateModel provides a mock function for the type MockCodeHelper
func (_mock *MockCodeHelper) GenerateModel(doc models.Generator) error {
	ret := _mock.Called(doc)

	if len(ret) == 0 {
		panic("no return value specified for GenerateModel")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(models.Generator) error); ok {
		r0 = returnFunc(doc)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockCodeHelper_GenerateModel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GenerateModel'
type MockCodeHelper_GenerateModel_Call struct {
	*mock.Call
}

// GenerateModel is a helper method to define mock.On call
//   - doc models.Generator
func (_e *MockCodeHelper_Expecter) GenerateModel(doc interface{}) *MockCodeHelper_GenerateModel_Call {
	return &MockCodeHelper_GenerateModel_Call{Call: _e.mock.On("GenerateModel", doc)}
}

func (_c *MockCodeHelper_GenerateModel_Call) Run(run func(doc models.Generator)) *MockCodeHelper_GenerateModel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 models.Generator
		if args[0] != nil {
			arg0 = args[0].(models.Generator)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockCodeHelper_GenerateModel_Call) Return(err error) *MockCodeHelper_GenerateModel_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockCodeHelper_GenerateModel_Call) RunAndReturn(run func(doc models.Generator) error) *MockCodeHelper_GenerateModel_Call {
	_c.Call.Return(run)
	return _c
}
