// Code generated by mockery v2.50.0. DO NOT EDIT.

package helpers

import (
	mock "github.com/stretchr/testify/mock"
	models "github.com/tech-thinker/gozen/models"
)

// ProjectHelperMock is an autogenerated mock type for the ProjectHelper type
type ProjectHelperMock struct {
	mock.Mock
}

// CreateRestAPI provides a mock function with given fields: project
func (_m *ProjectHelperMock) CreateRestAPI(project models.Project) error {
	ret := _m.Called(project)

	if len(ret) == 0 {
		panic("no return value specified for CreateRestAPI")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(models.Project) error); ok {
		r0 = rf(project)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreategRPCAPI provides a mock function with given fields: project
func (_m *ProjectHelperMock) CreategRPCAPI(project models.Project) error {
	ret := _m.Called(project)

	if len(ret) == 0 {
		panic("no return value specified for CreategRPCAPI")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(models.Project) error); ok {
		r0 = rf(project)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// InitProject provides a mock function with given fields: project
func (_m *ProjectHelperMock) InitProject(project models.Project) error {
	ret := _m.Called(project)

	if len(ret) == 0 {
		panic("no return value specified for InitProject")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(models.Project) error); ok {
		r0 = rf(project)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetupConfig provides a mock function with given fields: project
func (_m *ProjectHelperMock) SetupConfig(project models.Project) error {
	ret := _m.Called(project)

	if len(ret) == 0 {
		panic("no return value specified for SetupConfig")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(models.Project) error); ok {
		r0 = rf(project)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetupConstants provides a mock function with given fields: project
func (_m *ProjectHelperMock) SetupConstants(project models.Project) error {
	ret := _m.Called(project)

	if len(ret) == 0 {
		panic("no return value specified for SetupConstants")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(models.Project) error); ok {
		r0 = rf(project)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetupDocker provides a mock function with given fields: project
func (_m *ProjectHelperMock) SetupDocker(project models.Project) error {
	ret := _m.Called(project)

	if len(ret) == 0 {
		panic("no return value specified for SetupDocker")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(models.Project) error); ok {
		r0 = rf(project)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetupEnv provides a mock function with given fields: project
func (_m *ProjectHelperMock) SetupEnv(project models.Project) error {
	ret := _m.Called(project)

	if len(ret) == 0 {
		panic("no return value specified for SetupEnv")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(models.Project) error); ok {
		r0 = rf(project)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetupLogger provides a mock function with given fields: project
func (_m *ProjectHelperMock) SetupLogger(project models.Project) error {
	ret := _m.Called(project)

	if len(ret) == 0 {
		panic("no return value specified for SetupLogger")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(models.Project) error); ok {
		r0 = rf(project)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetupModel provides a mock function with given fields: project
func (_m *ProjectHelperMock) SetupModel(project models.Project) error {
	ret := _m.Called(project)

	if len(ret) == 0 {
		panic("no return value specified for SetupModel")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(models.Project) error); ok {
		r0 = rf(project)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetupRepository provides a mock function with given fields: project
func (_m *ProjectHelperMock) SetupRepository(project models.Project) error {
	ret := _m.Called(project)

	if len(ret) == 0 {
		panic("no return value specified for SetupRepository")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(models.Project) error); ok {
		r0 = rf(project)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetupService provides a mock function with given fields: project
func (_m *ProjectHelperMock) SetupService(project models.Project) error {
	ret := _m.Called(project)

	if len(ret) == 0 {
		panic("no return value specified for SetupService")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(models.Project) error); ok {
		r0 = rf(project)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetupUtils provides a mock function with given fields: project
func (_m *ProjectHelperMock) SetupUtils(project models.Project) error {
	ret := _m.Called(project)

	if len(ret) == 0 {
		panic("no return value specified for SetupUtils")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(models.Project) error); ok {
		r0 = rf(project)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewProjectHelperMock creates a new instance of ProjectHelperMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewProjectHelperMock(t interface {
	mock.TestingT
	Cleanup(func())
}) *ProjectHelperMock {
	mock := &ProjectHelperMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
