// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package helpers

import (
	mock "github.com/stretchr/testify/mock"
	"github.com/tech-thinker/gozen/models"
)

// NewMockProjectHelper creates a new instance of MockProjectHelper. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockProjectHelper(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockProjectHelper {
	mock := &MockProjectHelper{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockProjectHelper is an autogenerated mock type for the ProjectHelper type
type MockProjectHelper struct {
	mock.Mock
}

type MockProjectHelper_Expecter struct {
	mock *mock.Mock
}

func (_m *MockProjectHelper) EXPECT() *MockProjectHelper_Expecter {
	return &MockProjectHelper_Expecter{mock: &_m.Mock}
}

// CreateRestAPI provides a mock function for the type MockProjectHelper
func (_mock *MockProjectHelper) CreateRestAPI(project models.Project) error {
	ret := _mock.Called(project)

	if len(ret) == 0 {
		panic("no return value specified for CreateRestAPI")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(models.Project) error); ok {
		r0 = returnFunc(project)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockProjectHelper_CreateRestAPI_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateRestAPI'
type MockProjectHelper_CreateRestAPI_Call struct {
	*mock.Call
}

// CreateRestAPI is a helper method to define mock.On call
//   - project models.Project
func (_e *MockProjectHelper_Expecter) CreateRestAPI(project interface{}) *MockProjectHelper_CreateRestAPI_Call {
	return &MockProjectHelper_CreateRestAPI_Call{Call: _e.mock.On("CreateRestAPI", project)}
}

func (_c *MockProjectHelper_CreateRestAPI_Call) Run(run func(project models.Project)) *MockProjectHelper_CreateRestAPI_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 models.Project
		if args[0] != nil {
			arg0 = args[0].(models.Project)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockProjectHelper_CreateRestAPI_Call) Return(err error) *MockProjectHelper_CreateRestAPI_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockProjectHelper_CreateRestAPI_Call) RunAndReturn(run func(project models.Project) error) *MockProjectHelper_CreateRestAPI_Call {
	_c.Call.Return(run)
	return _c
}

// CreategRPCAPI provides a mock function for the type MockProjectHelper
func (_mock *MockProjectHelper) CreategRPCAPI(project models.Project) error {
	ret := _mock.Called(project)

	if len(ret) == 0 {
		panic("no return value specified for CreategRPCAPI")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(models.Project) error); ok {
		r0 = returnFunc(project)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockProjectHelper_CreategRPCAPI_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreategRPCAPI'
type MockProjectHelper_CreategRPCAPI_Call struct {
	*mock.Call
}

// CreategRPCAPI is a helper method to define mock.On call
//   - project models.Project
func (_e *MockProjectHelper_Expecter) CreategRPCAPI(project interface{}) *MockProjectHelper_CreategRPCAPI_Call {
	return &MockProjectHelper_CreategRPCAPI_Call{Call: _e.mock.On("CreategRPCAPI", project)}
}

func (_c *MockProjectHelper_CreategRPCAPI_Call) Run(run func(project models.Project)) *MockProjectHelper_CreategRPCAPI_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 models.Project
		if args[0] != nil {
			arg0 = args[0].(models.Project)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockProjectHelper_CreategRPCAPI_Call) Return(err error) *MockProjectHelper_CreategRPCAPI_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockProjectHelper_CreategRPCAPI_Call) RunAndReturn(run func(project models.Project) error) *MockProjectHelper_CreategRPCAPI_Call {
	_c.Call.Return(run)
	return _c
}

// InitProject provides a mock function for the type MockProjectHelper
func (_mock *MockProjectHelper) InitProject(project models.Project) error {
	ret := _mock.Called(project)

	if len(ret) == 0 {
		panic("no return value specified for InitProject")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(models.Project) error); ok {
		r0 = returnFunc(project)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockProjectHelper_InitProject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'InitProject'
type MockProjectHelper_InitProject_Call struct {
	*mock.Call
}

// InitProject is a helper method to define mock.On call
//   - project models.Project
func (_e *MockProjectHelper_Expecter) InitProject(project interface{}) *MockProjectHelper_InitProject_Call {
	return &MockProjectHelper_InitProject_Call{Call: _e.mock.On("InitProject", project)}
}

func (_c *MockProjectHelper_InitProject_Call) Run(run func(project models.Project)) *MockProjectHelper_InitProject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 models.Project
		if args[0] != nil {
			arg0 = args[0].(models.Project)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockProjectHelper_InitProject_Call) Return(err error) *MockProjectHelper_InitProject_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockProjectHelper_InitProject_Call) RunAndReturn(run func(project models.Project) error) *MockProjectHelper_InitProject_Call {
	_c.Call.Return(run)
	return _c
}

// SetupConfig provides a mock function for the type MockProjectHelper
func (_mock *MockProjectHelper) SetupConfig(project models.Project) error {
	ret := _mock.Called(project)

	if len(ret) == 0 {
		panic("no return value specified for SetupConfig")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(models.Project) error); ok {
		r0 = returnFunc(project)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockProjectHelper_SetupConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetupConfig'
type MockProjectHelper_SetupConfig_Call struct {
	*mock.Call
}

// SetupConfig is a helper method to define mock.On call
//   - project models.Project
func (_e *MockProjectHelper_Expecter) SetupConfig(project interface{}) *MockProjectHelper_SetupConfig_Call {
	return &MockProjectHelper_SetupConfig_Call{Call: _e.mock.On("SetupConfig", project)}
}

func (_c *MockProjectHelper_SetupConfig_Call) Run(run func(project models.Project)) *MockProjectHelper_SetupConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 models.Project
		if args[0] != nil {
			arg0 = args[0].(models.Project)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockProjectHelper_SetupConfig_Call) Return(err error) *MockProjectHelper_SetupConfig_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockProjectHelper_SetupConfig_Call) RunAndReturn(run func(project models.Project) error) *MockProjectHelper_SetupConfig_Call {
	_c.Call.Return(run)
	return _c
}

// SetupConstants provides a mock function for the type MockProjectHelper
func (_mock *MockProjectHelper) SetupConstants(project models.Project) error {
	ret := _mock.Called(project)

	if len(ret) == 0 {
		panic("no return value specified for SetupConstants")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(models.Project) error); ok {
		r0 = returnFunc(project)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockProjectHelper_SetupConstants_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetupConstants'
type MockProjectHelper_SetupConstants_Call struct {
	*mock.Call
}

// SetupConstants is a helper method to define mock.On call
//   - project models.Project
func (_e *MockProjectHelper_Expecter) SetupConstants(project interface{}) *MockProjectHelper_SetupConstants_Call {
	return &MockProjectHelper_SetupConstants_Call{Call: _e.mock.On("SetupConstants", project)}
}

func (_c *MockProjectHelper_SetupConstants_Call) Run(run func(project models.Project)) *MockProjectHelper_SetupConstants_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 models.Project
		if args[0] != nil {
			arg0 = args[0].(models.Project)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockProjectHelper_SetupConstants_Call) Return(err error) *MockProjectHelper_SetupConstants_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockProjectHelper_SetupConstants_Call) RunAndReturn(run func(project models.Project) error) *MockProjectHelper_SetupConstants_Call {
	_c.Call.Return(run)
	return _c
}

// SetupDocker provides a mock function for the type MockProjectHelper
func (_mock *MockProjectHelper) SetupDocker(project models.Project) error {
	ret := _mock.Called(project)

	if len(ret) == 0 {
		panic("no return value specified for SetupDocker")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(models.Project) error); ok {
		r0 = returnFunc(project)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockProjectHelper_SetupDocker_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetupDocker'
type MockProjectHelper_SetupDocker_Call struct {
	*mock.Call
}

// SetupDocker is a helper method to define mock.On call
//   - project models.Project
func (_e *MockProjectHelper_Expecter) SetupDocker(project interface{}) *MockProjectHelper_SetupDocker_Call {
	return &MockProjectHelper_SetupDocker_Call{Call: _e.mock.On("SetupDocker", project)}
}

func (_c *MockProjectHelper_SetupDocker_Call) Run(run func(project models.Project)) *MockProjectHelper_SetupDocker_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 models.Project
		if args[0] != nil {
			arg0 = args[0].(models.Project)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockProjectHelper_SetupDocker_Call) Return(err error) *MockProjectHelper_SetupDocker_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockProjectHelper_SetupDocker_Call) RunAndReturn(run func(project models.Project) error) *MockProjectHelper_SetupDocker_Call {
	_c.Call.Return(run)
	return _c
}

// SetupEnv provides a mock function for the type MockProjectHelper
func (_mock *MockProjectHelper) SetupEnv(project models.Project) error {
	ret := _mock.Called(project)

	if len(ret) == 0 {
		panic("no return value specified for SetupEnv")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(models.Project) error); ok {
		r0 = returnFunc(project)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockProjectHelper_SetupEnv_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetupEnv'
type MockProjectHelper_SetupEnv_Call struct {
	*mock.Call
}

// SetupEnv is a helper method to define mock.On call
//   - project models.Project
func (_e *MockProjectHelper_Expecter) SetupEnv(project interface{}) *MockProjectHelper_SetupEnv_Call {
	return &MockProjectHelper_SetupEnv_Call{Call: _e.mock.On("SetupEnv", project)}
}

func (_c *MockProjectHelper_SetupEnv_Call) Run(run func(project models.Project)) *MockProjectHelper_SetupEnv_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 models.Project
		if args[0] != nil {
			arg0 = args[0].(models.Project)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockProjectHelper_SetupEnv_Call) Return(err error) *MockProjectHelper_SetupEnv_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockProjectHelper_SetupEnv_Call) RunAndReturn(run func(project models.Project) error) *MockProjectHelper_SetupEnv_Call {
	_c.Call.Return(run)
	return _c
}

// SetupLogger provides a mock function for the type MockProjectHelper
func (_mock *MockProjectHelper) SetupLogger(project models.Project) error {
	ret := _mock.Called(project)

	if len(ret) == 0 {
		panic("no return value specified for SetupLogger")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(models.Project) error); ok {
		r0 = returnFunc(project)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockProjectHelper_SetupLogger_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetupLogger'
type MockProjectHelper_SetupLogger_Call struct {
	*mock.Call
}

// SetupLogger is a helper method to define mock.On call
//   - project models.Project
func (_e *MockProjectHelper_Expecter) SetupLogger(project interface{}) *MockProjectHelper_SetupLogger_Call {
	return &MockProjectHelper_SetupLogger_Call{Call: _e.mock.On("SetupLogger", project)}
}

func (_c *MockProjectHelper_SetupLogger_Call) Run(run func(project models.Project)) *MockProjectHelper_SetupLogger_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 models.Project
		if args[0] != nil {
			arg0 = args[0].(models.Project)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockProjectHelper_SetupLogger_Call) Return(err error) *MockProjectHelper_SetupLogger_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockProjectHelper_SetupLogger_Call) RunAndReturn(run func(project models.Project) error) *MockProjectHelper_SetupLogger_Call {
	_c.Call.Return(run)
	return _c
}

// SetupModel provides a mock function for the type MockProjectHelper
func (_mock *MockProjectHelper) SetupModel(project models.Project) error {
	ret := _mock.Called(project)

	if len(ret) == 0 {
		panic("no return value specified for SetupModel")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(models.Project) error); ok {
		r0 = returnFunc(project)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockProjectHelper_SetupModel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetupModel'
type MockProjectHelper_SetupModel_Call struct {
	*mock.Call
}

// SetupModel is a helper method to define mock.On call
//   - project models.Project
func (_e *MockProjectHelper_Expecter) SetupModel(project interface{}) *MockProjectHelper_SetupModel_Call {
	return &MockProjectHelper_SetupModel_Call{Call: _e.mock.On("SetupModel", project)}
}

func (_c *MockProjectHelper_SetupModel_Call) Run(run func(project models.Project)) *MockProjectHelper_SetupModel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 models.Project
		if args[0] != nil {
			arg0 = args[0].(models.Project)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockProjectHelper_SetupModel_Call) Return(err error) *MockProjectHelper_SetupModel_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockProjectHelper_SetupModel_Call) RunAndReturn(run func(project models.Project) error) *MockProjectHelper_SetupModel_Call {
	_c.Call.Return(run)
	return _c
}

// SetupRepository provides a mock function for the type MockProjectHelper
func (_mock *MockProjectHelper) SetupRepository(project models.Project) error {
	ret := _mock.Called(project)

	if len(ret) == 0 {
		panic("no return value specified for SetupRepository")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(models.Project) error); ok {
		r0 = returnFunc(project)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockProjectHelper_SetupRepository_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetupRepository'
type MockProjectHelper_SetupRepository_Call struct {
	*mock.Call
}

// SetupRepository is a helper method to define mock.On call
//   - project models.Project
func (_e *MockProjectHelper_Expecter) SetupRepository(project interface{}) *MockProjectHelper_SetupRepository_Call {
	return &MockProjectHelper_SetupRepository_Call{Call: _e.mock.On("SetupRepository", project)}
}

func (_c *MockProjectHelper_SetupRepository_Call) Run(run func(project models.Project)) *MockProjectHelper_SetupRepository_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 models.Project
		if args[0] != nil {
			arg0 = args[0].(models.Project)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockProjectHelper_SetupRepository_Call) Return(err error) *MockProjectHelper_SetupRepository_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockProjectHelper_SetupRepository_Call) RunAndReturn(run func(project models.Project) error) *MockProjectHelper_SetupRepository_Call {
	_c.Call.Return(run)
	return _c
}

// SetupService provides a mock function for the type MockProjectHelper
func (_mock *MockProjectHelper) SetupService(project models.Project) error {
	ret := _mock.Called(project)

	if len(ret) == 0 {
		panic("no return value specified for SetupService")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(models.Project) error); ok {
		r0 = returnFunc(project)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockProjectHelper_SetupService_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetupService'
type MockProjectHelper_SetupService_Call struct {
	*mock.Call
}

// SetupService is a helper method to define mock.On call
//   - project models.Project
func (_e *MockProjectHelper_Expecter) SetupService(project interface{}) *MockProjectHelper_SetupService_Call {
	return &MockProjectHelper_SetupService_Call{Call: _e.mock.On("SetupService", project)}
}

func (_c *MockProjectHelper_SetupService_Call) Run(run func(project models.Project)) *MockProjectHelper_SetupService_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 models.Project
		if args[0] != nil {
			arg0 = args[0].(models.Project)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockProjectHelper_SetupService_Call) Return(err error) *MockProjectHelper_SetupService_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockProjectHelper_SetupService_Call) RunAndReturn(run func(project models.Project) error) *MockProjectHelper_SetupService_Call {
	_c.Call.Return(run)
	return _c
}

// SetupUtils provides a mock function for the type MockProjectHelper
func (_mock *MockProjectHelper) SetupUtils(project models.Project) error {
	ret := _mock.Called(project)

	if len(ret) == 0 {
		panic("no return value specified for SetupUtils")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(models.Project) error); ok {
		r0 = returnFunc(project)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockProjectHelper_SetupUtils_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetupUtils'
type MockProjectHelper_SetupUtils_Call struct {
	*mock.Call
}

// SetupUtils is a helper method to define mock.On call
//   - project models.Project
func (_e *MockProjectHelper_Expecter) SetupUtils(project interface{}) *MockProjectHelper_SetupUtils_Call {
	return &MockProjectHelper_SetupUtils_Call{Call: _e.mock.On("SetupUtils", project)}
}

func (_c *MockProjectHelper_SetupUtils_Call) Run(run func(project models.Project)) *MockProjectHelper_SetupUtils_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 models.Project
		if args[0] != nil {
			arg0 = args[0].(models.Project)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockProjectHelper_SetupUtils_Call) Return(err error) *MockProjectHelper_SetupUtils_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockProjectHelper_SetupUtils_Call) RunAndReturn(run func(project models.Project) error) *MockProjectHelper_SetupUtils_Call {
	_c.Call.Return(run)
	return _c
}
