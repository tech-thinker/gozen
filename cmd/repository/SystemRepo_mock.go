// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package repository

import (
	mock "github.com/stretchr/testify/mock"
	"github.com/tech-thinker/gozen/models"
)

// NewMockSystemRepo creates a new instance of MockSystemRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockSystemRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockSystemRepo {
	mock := &MockSystemRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockSystemRepo is an autogenerated mock type for the SystemRepo type
type MockSystemRepo struct {
	mock.Mock
}

type MockSystemRepo_Expecter struct {
	mock *mock.Mock
}

func (_m *MockSystemRepo) EXPECT() *MockSystemRepo_Expecter {
	return &MockSystemRepo_Expecter{mock: &_m.Mock}
}

// ExecShell provides a mock function for the type MockSystemRepo
func (_mock *MockSystemRepo) ExecShell(command string, args ...string) ([]string, error) {
	var tmpRet mock.Arguments
	if len(args) > 0 {
		tmpRet = _mock.Called(command, args)
	} else {
		tmpRet = _mock.Called(command)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for ExecShell")
	}

	var r0 []string
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, ...string) ([]string, error)); ok {
		return returnFunc(command, args...)
	}
	if returnFunc, ok := ret.Get(0).(func(string, ...string) []string); ok {
		r0 = returnFunc(command, args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string, ...string) error); ok {
		r1 = returnFunc(command, args...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSystemRepo_ExecShell_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExecShell'
type MockSystemRepo_ExecShell_Call struct {
	*mock.Call
}

// ExecShell is a helper method to define mock.On call
//   - command string
//   - args ...string
func (_e *MockSystemRepo_Expecter) ExecShell(command interface{}, args ...interface{}) *MockSystemRepo_ExecShell_Call {
	return &MockSystemRepo_ExecShell_Call{Call: _e.mock.On("ExecShell",
		append([]interface{}{command}, args...)...)}
}

func (_c *MockSystemRepo_ExecShell_Call) Run(run func(command string, args ...string)) *MockSystemRepo_ExecShell_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 []string
		var variadicArgs []string
		if len(args) > 1 {
			variadicArgs = args[1].([]string)
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *MockSystemRepo_ExecShell_Call) Return(strings []string, err error) *MockSystemRepo_ExecShell_Call {
	_c.Call.Return(strings, err)
	return _c
}

func (_c *MockSystemRepo_ExecShell_Call) RunAndReturn(run func(command string, args ...string) ([]string, error)) *MockSystemRepo_ExecShell_Call {
	_c.Call.Return(run)
	return _c
}

// ExecShellRaw provides a mock function for the type MockSystemRepo
func (_mock *MockSystemRepo) ExecShellRaw(command string, args ...string) ([]byte, error) {
	var tmpRet mock.Arguments
	if len(args) > 0 {
		tmpRet = _mock.Called(command, args)
	} else {
		tmpRet = _mock.Called(command)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for ExecShellRaw")
	}

	var r0 []byte
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string, ...string) ([]byte, error)); ok {
		return returnFunc(command, args...)
	}
	if returnFunc, ok := ret.Get(0).(func(string, ...string) []byte); ok {
		r0 = returnFunc(command, args...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string, ...string) error); ok {
		r1 = returnFunc(command, args...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockSystemRepo_ExecShellRaw_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ExecShellRaw'
type MockSystemRepo_ExecShellRaw_Call struct {
	*mock.Call
}

// ExecShellRaw is a helper method to define mock.On call
//   - command string
//   - args ...string
func (_e *MockSystemRepo_Expecter) ExecShellRaw(command interface{}, args ...interface{}) *MockSystemRepo_ExecShellRaw_Call {
	return &MockSystemRepo_ExecShellRaw_Call{Call: _e.mock.On("ExecShellRaw",
		append([]interface{}{command}, args...)...)}
}

func (_c *MockSystemRepo_ExecShellRaw_Call) Run(run func(command string, args ...string)) *MockSystemRepo_ExecShellRaw_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 []string
		var variadicArgs []string
		if len(args) > 1 {
			variadicArgs = args[1].([]string)
		}
		arg1 = variadicArgs
		run(
			arg0,
			arg1...,
		)
	})
	return _c
}

func (_c *MockSystemRepo_ExecShellRaw_Call) Return(bytes []byte, err error) *MockSystemRepo_ExecShellRaw_Call {
	_c.Call.Return(bytes, err)
	return _c
}

func (_c *MockSystemRepo_ExecShellRaw_Call) RunAndReturn(run func(command string, args ...string) ([]byte, error)) *MockSystemRepo_ExecShellRaw_Call {
	_c.Call.Return(run)
	return _c
}

// Write provides a mock function for the type MockSystemRepo
func (_mock *MockSystemRepo) Write(appDir string, templatePath string, destination string, data interface{}) error {
	ret := _mock.Called(appDir, templatePath, destination, data)

	if len(ret) == 0 {
		panic("no return value specified for Write")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string, string, string, interface{}) error); ok {
		r0 = returnFunc(appDir, templatePath, destination, data)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockSystemRepo_Write_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Write'
type MockSystemRepo_Write_Call struct {
	*mock.Call
}

// Write is a helper method to define mock.On call
//   - appDir string
//   - templatePath string
//   - destination string
//   - data interface{}
func (_e *MockSystemRepo_Expecter) Write(appDir interface{}, templatePath interface{}, destination interface{}, data interface{}) *MockSystemRepo_Write_Call {
	return &MockSystemRepo_Write_Call{Call: _e.mock.On("Write", appDir, templatePath, destination, data)}
}

func (_c *MockSystemRepo_Write_Call) Run(run func(appDir string, templatePath string, destination string, data interface{})) *MockSystemRepo_Write_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 string
		if args[1] != nil {
			arg1 = args[1].(string)
		}
		var arg2 string
		if args[2] != nil {
			arg2 = args[2].(string)
		}
		var arg3 interface{}
		if args[3] != nil {
			arg3 = args[3].(interface{})
		}
		run(
			arg0,
			arg1,
			arg2,
			arg3,
		)
	})
	return _c
}

func (_c *MockSystemRepo_Write_Call) Return(err error) *MockSystemRepo_Write_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockSystemRepo_Write_Call) RunAndReturn(run func(appDir string, templatePath string, destination string, data interface{}) error) *MockSystemRepo_Write_Call {
	_c.Call.Return(run)
	return _c
}

// WriteAll provides a mock function for the type MockSystemRepo
func (_mock *MockSystemRepo) WriteAll(appDir string, fileConfigs []models.FileConfig, data interface{}) error {
	ret := _mock.Called(appDir, fileConfigs, data)

	if len(ret) == 0 {
		panic("no return value specified for WriteAll")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string, []models.FileConfig, interface{}) error); ok {
		r0 = returnFunc(appDir, fileConfigs, data)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockSystemRepo_WriteAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WriteAll'
type MockSystemRepo_WriteAll_Call struct {
	*mock.Call
}

// WriteAll is a helper method to define mock.On call
//   - appDir string
//   - fileConfigs []models.FileConfig
//   - data interface{}
func (_e *MockSystemRepo_Expecter) WriteAll(appDir interface{}, fileConfigs interface{}, data interface{}) *MockSystemRepo_WriteAll_Call {
	return &MockSystemRepo_WriteAll_Call{Call: _e.mock.On("WriteAll", appDir, fileConfigs, data)}
}

func (_c *MockSystemRepo_WriteAll_Call) Run(run func(appDir string, fileConfigs []models.FileConfig, data interface{})) *MockSystemRepo_WriteAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 string
		if args[0] != nil {
			arg0 = args[0].(string)
		}
		var arg1 []models.FileConfig
		if args[1] != nil {
			arg1 = args[1].([]models.FileConfig)
		}
		var arg2 interface{}
		if args[2] != nil {
			arg2 = args[2].(interface{})
		}
		run(
			arg0,
			arg1,
			arg2,
		)
	})
	return _c
}

func (_c *MockSystemRepo_WriteAll_Call) Return(err error) *MockSystemRepo_WriteAll_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockSystemRepo_WriteAll_Call) RunAndReturn(run func(appDir string, fileConfigs []models.FileConfig, data interface{}) error) *MockSystemRepo_WriteAll_Call {
	_c.Call.Return(run)
	return _c
}
